[ClassVersion("1.0.0.0"), FriendlyName("xWebAppPool")]
class MSFT_xWebAppPool : OMI_BaseResource
{
    [Key, Description("Indicates the application pool name.")] String Name;
    [Write, Description("Indicates if the application pool exists."), ValueMap{"Present","Absent"}, Values{"Present","Absent"}] String Ensure;
    [Write, Description("Indicates the state of the application pool."), ValueMap{"Started","Stopped"}, Values{"Started","Stopped"}] String State;
    [Write, Description("When true, indicates to the World Wide Web Publishing Service (W3SVC) that the application pool should be automatically started when it is created or when IIS is started.")] Boolean autoStart;
    [Write, Description("Indicates the .NET configuration file for the application pool.")] String CLRConfigFile;
    [Write, Description("When true, enables a 32-bit application to run on a computer that runs a 64-bit version of Windows.")] Boolean enable32BitAppOnWin64;
    [Write, Description("When true, indicates that delegated settings in Web.config files will processed for applications within this application pool. When false, all settings in Web.config files will be ignored for this application pool.")] Boolean enableConfigurationOverride;
    [Write, Description("Indicates the request-processing mode that is used to process requests for managed content."), ValueMap{"Integrated","Classic"},Values{"Integrated","Classic"}] String managedPipelineMode;
    [Write, Description("Indicates the managed loader to use for pre-loading the application pool.")] String managedRuntimeLoader;
    [Write, Description("Indicates the CLR version to be used by the application pool."), ValueMap{"v4.0","v2.0",""},Values{"v4.0","v2.0",""}] String managedRuntimeVersion;
    [Write, Description("When true, the Windows Process Activation Service (WAS) creates and passes a token for the built-in IUSR anonymous user account to the Anonymous authentication module. The Anonymous authentication module uses the token to impersonate the built-in account. When PassAnonymousToken is false, the token will not be passed.")] Boolean passAnonymousToken;
    [Write, Description("Indicates the startup type for the application pool."), ValueMap{"AlwaysRunning","OnDemand"},Values{"AlwaysRunning","OnDemand"}] String startMode;
    [Write, Description("Indicates the maximum number of requests that HTTP.sys will queue for the application pool.")] UInt32 queueLength;
    [Write, Description("Configures the action that IIS takes when a worker process exceeds its configured CPU limit."), ValueMap{"NoAction","KillW3wp","Throttle","ThrottleUnderLoad"},Values{"NoAction","KillW3wp","Throttle","ThrottleUnderLoad"}] String cpuAction;
    [Write, Description("Configures the maximum percentage of CPU time that the worker processes in an application pool are allowed to consume over a period of time as indicated by the resetInterval attribute.")] UInt32 cpuLimit;
    [Write, Description("Indicates the reset period (in minutes) for CPU monitoring and throttling limits on an application pool.")] String cpuResetInterval;
    [Write, Description("Indicates whether a particular worker process assigned to an application pool should also be assigned to a given CPU.")] Boolean cpuSmpAffinitized;
    [Write, Description("Indicates the hexadecimal processor mask for multi-processor computers, which indicates to which CPU the worker processes in an application pool should be bound. Before this property takes effect, the smpAffinitized attribute must be set to true for the application pool.")] UInt32 cpuSmpProcessorAffinityMask;
    [Write, Description("Indicates the high-order DWORD hexadecimal processor mask for 64-bit multi-processor computers, which indicates to which CPU the worker processes in an application pool should be bound. Before this property takes effect, the smpAffinitized attribute must be set to true for the application pool.")] UInt32 cpuSmpProcessorAffinityMask2;
    [Write, Description("Indicates the account identity under which the application pool runs."), ValueMap{"ApplicationPoolIdentity","LocalSystem","LocalService","NetworkService","SpecificUser"}, Values{"ApplicationPoolIdentity","LocalSystem","LocalService","NetworkService","SpecificUser"}] String identityType;
    [Write, Description("Indicates the userName and password attributes if the application pool runs under a custom identity."), EmbeddedInstance("MSFT_Credential")] String Credential;
    [Write, Description("Indicates how long (in minutes) a worker process should run idle if no new requests are received and the worker process is not processing requests.")] String idleTimeout;
    [Write, Description("Indicates the action to perform when the idle timeout duration has been reached. This property is supported in IIS 8.5 or later."), ValueMap{"Terminate","Suspend"}, Values{"Terminate","Suspend"}] String idleTimeoutAction;
    [Write, Description("Indicates whether IIS loads the user profile for the application pool identity.")] Boolean loadUserProfile;
    [Write, Description("Indicates which action taken in the process gets logged to the Event Viewer. This property is supported in IIS 8.0 or later.")] String logEventOnProcessModel;
    [Write, Description("Indicates the logon type for the process identity."), ValueMap{"LogonBatch","LogonService"},Values{"LogonBatch","LogonService"}] String logonType;
    [Write, Description("Indicates whether the IIS_IUSRS group Security Identifier (SID) is added to the worker process token. When false, IIS automatically uses an application pool identity as though it were a member of the built-in IIS_IUSRS group, which has access to necessary file and system resources. When true, an application pool identity must be explicitly added to all resources that a worker process requires at runtime.")] Boolean manualGroupMembership;
    [Write, Description("Indicates the maximum number of worker processes that would be used for the application pool.")] UInt32 maxProcesses;
    [Write, Description("Indicates whether pinging is enabled for the worker process.")] Boolean pingingEnabled;
    [Write, Description("Indicates the time between health-monitoring pings that the W3SVC service sends to a worker process.")] String pingInterval;
    [Write, Description("Indicates the time that a worker process is given to respond to a health-monitoring ping. After the time limit is exceeded, the W3SVC service terminates the worker process.")] String pingResponseTime;
    [Write, Description("Indicates the environment to be set based on the user profile for the new process. This property is supported in IIS 8.0 or later.")] Boolean setProfileEnvironment;
    [Write, Description("Indicates the time that the W3SVC service waits after it initiated a recycle.")] String shutdownTimeLimit;
    [Write, Description("Indicates the time that IIS waits for an application pool to start.")] String startupTimeLimit;
    [Write, Description("Indicates an executable to run when the W3SVC service orphans a worker process.")] String orphanActionExe;
    [Write, Description("Indicates command-line parameters for the executable named by the orphanActionExe attribute.")] String orphanActionParams;
    [Write, Description("Indicates whether to assign a worker process to an orphan state instead of terminating it when an application pool fails.")] Boolean orphanWorkerProcess;
    [Write, Description("Indicates behavior when a worker process cannot be started, such as when the request queue is full or an application pool is in rapid-fail protection."), ValueMap{"HttpLevel","TcpLevel"},Values{"HttpLevel","TcpLevel"}] String loadBalancerCapabilities;
    [Write, Description("Indicates whether rapid-fail protection is enabled.")] Boolean rapidFailProtection;
    [Write, Description("Indicates the number of minutes before the failure count for a process is reset.")] String rapidFailProtectionInterval;
    [Write, Description("Indicates the maximum number of failures that are allowed within the number of minutes specified by the rapidFailProtectionInterval attribute.")] UInt32 rapidFailProtectionMaxCrashes;
    [Write, Description("Indicates an executable to run when the W3SVC service shuts down an application pool.")] String autoShutdownExe;
    [Write, Description("Indicates command-line parameters for the executable that is specified in the autoShutdownExe attribute.")] String autoShutdownParams;
    [Write, Description("Indicates whether the W3SVC service should start another worker process to replace the existing worker process while that process is shutting down.")] Boolean disallowOverlappingRotation;
    [Write, Description("Indicates whether the W3SVC service should rotate worker processes in an application pool when the configuration has changed.")] Boolean disallowRotationOnConfigChange;
    [Write, Description("Indicates that IIS should log an event when an application pool is recycled.")] String logEventOnRecycle;
    [Write, Description("Indicates the amount of virtual memory (in kilobytes) that a worker process can use before the worker process is recycled.")] UInt32 restartMemoryLimit;
    [Write, Description("Indicates the amount of private memory (in kilobytes) that a worker process can use before the worker process recycles.")] UInt32 restartPrivateMemoryLimit;
    [Write, Description("Indicates that the worker process should be recycled after it processes a specific number of requests.")] UInt32 restartRequestsLimit;
    [Write, Description("Indicates that the worker process should be recycled after a specified amount of time has elapsed.")] String restartTimeLimit;
    [Write, Description("Indicates the time intervals between restarts of worker processes in an application pool.")] String restartSchedule[];
};
